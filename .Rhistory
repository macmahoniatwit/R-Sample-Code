iris
mtcars
cyl
load mmtcar
count
?
efgewg
clear
iris
dim
mtcars
count(cyl)
count(mtcars, cyl=8)
count.fields(mtcars, cyl=8)
count.fields(mtcars)
mtcars = x
table(unlist(mtcars))
mtcars
summary(mtcars)
data(mtcars)
names(mtcars)
?aggregate
aggregate(x, cyl = 8)
aggregate(cyl)
dim(cyl)
names(mtcars)
View(mtcars)
ncol(mtcars)
print(col)
ncol(mtcars)
for col in mtcars
for col in data.columns:
print(col)
ncol(mtcars)
colnames(mtcars)
q()
print(mat)
mat <- matrix(,nrow = 4, ncol = 4)
mat
mat[,1] <- c(1.0,0.1,0.1,0.1)
mat
mat[,2] <- c(0.5,1.0,0.1,0.1)
mat[,3] <- c(0.1,0.1,1.0,0.1)
mat[,4] <- c(0.1,0.1,0.1,1.0)
mat
rownames(mat) <- ("R1", "R2", "R3", "R4")
row.names(mat) <- ("R1", "R2", "R3", "R4")
row.names(mat) <- ("R1", "R2", "R3", "R4")
row.names(mat) <- c("R1", "R2", "R3", "R4")
mat
mat["R2", 4] <- NA
mat
q()
pnorm(1.46, mean=0, sd=1, lower.tail = FALSE)
pnorm(-1.56, mean=0, sd=1, lower.tail = TRUE)
pnorm(2.41, mean=0, sd=1, lower.tail = TRUE) - pnorm(.67, mean=0, sd=1, lower.tail = TRUE)
pnorm(13.24, mean=11, sd=2, lower.tail = FALSE)
qnorm(.45)
qnorm(.45)
qnorm(.05)
q()
setwd("C:\\Users\\bishopm1\\Documents\\School\\Data Analytics\\Final Project")
bm <- read.csv("marathon_results_2017.csv")
head(bm)
## Function converts official time to minutes
time_in_mins <- function(time){
hr <- substring(time, 1, 1)
min <- substring(time, 3, 4)
sec <- substring(time, 6, 7)
x <- (as.numeric(hr)*60) + as.numeric(min) + (as.numeric(sec)/60)
return(x)
}
## Function reverts official time from minutes back to 00:00:00
revert_time <- function(time){
hr <- time %/% 60
time <- time %% 60
min <- floor(time)
time <- time - floor(time)
sec <- time*60
x <- sprintf("%02.0f:%02.0f:%02.0f", hr, min, sec)
return(x)
}
## Random sample from population
library(dplyr) 
samp <- sample_n(bm, 1000)
head(samp)
mean(time_in_mins(samp$Official.Time))
## load previously sampled data
samp <- read.csv("samp.csv")
head(samp)
## summary of age of runners
summary(bm$Age)
## One sample two sided test
## H0: mu = 238
## H1: mu != 238
## alpha = .05
## P-value approach
alpha <- .05 
## One sample two sided test
(re <- t.test(time_in_mins(bm$Official.Time), mu=238, alt = "two.sided", conf.level = 0.95))
re$p.value < alpha
names(samp)
summary(samp)
## One sample two sided test
## H0: mu = 238
## H1: mu != 238
## alpha = .05
## P-value approach
alpha <- .05 
(re <- t.test(time_in_mins(samp$Official.Time), mu=238, alt = "two.sided", conf.level = 0.95))
re$p.value < alpha
## REPLICATE P-VALUE
n <- length(time_in_mins(samp$Official.Time))
2*pt(re$statistic, df = n-1, lower.tail=FALSE)
mean(time_in_mins(samp$Official.Time))
alpha <- .05 
(re <- t.test(time_in_mins(samp$Official.Time), mu=238, alt = "two.sided", conf.level = 0.95))
re$p.value < alpha
## REPLICATE P-VALUE
n <- length(time_in_mins(samp$Official.Time))
pt(re$statistic, df = n-1, lower.tail=FALSE)
## REPLICATE P-VALUE
n <- length(time_in_mins(samp$Official.Time))
pt(re$statistic, df = n-1, lower.tail=T)
## REPLICATE P-VALUE
n <- length(time_in_mins(samp$Official.Time))
2*pt(re$statistic, df = n-1, lower.tail=T)
## One sample two sided test
## H0: mu = 238
## H1: mu != 238
## alpha = .05
## P-value approach
alpha <- .05 
(re <- t.test(time_in_mins(samp$Official.Time), mu=238, alt = "two.sided", conf.level = 0.95))
re$p.value < alpha
## REPLICATE P-VALUE
n <- length(time_in_mins(samp$Official.Time))
2*pt(re$statistic, df = n-1, lower.tail=T)
iqr <- IQR(samp$Official.Time)
(iqr <- IQR(time_in_mins(samp$Official.Time)))
summary(time_in_mins(samp$Official.Time))
nrow(samp$Official.Time)
nrows(samp$Official.Time)
nrow(samp$Official.Time)
nrow(samp)
names(samp)
thirty <- subset(samp, samp$Age)
thirty <- subset(samp, samp$Age == 30)
mean(thirty$Age)
mean(time_in_mins(thirty$Official.Time))
revert_time(mean(time_in_mins(thirty$Official.Time)))
nrow(thirty)
half <- time_in_mins(samp$Half)
samp$Half
## Function converts official time to minutes
time_in_mins <- function(time){
if(strcmp(time, "-"){
## Function converts official time to minutes
time_in_mins <- function(time){
if(strcmp(time, '-'){
## Function converts official time to minutes
time_in_mins <- function(time){
if(strcmp(time, '-')
return(NA)
## Function converts official time to minutes
time_in_mins <- function(time){
if (strcmp(time, '-') {
## Function converts official time to minutes
time_in_mins <- function(time){
if (strcmp(time, '-' == TRUE) {
## Function converts official time to minutes
time_in_mins <- function(time){
if (strcmp(time, '-')) {
return(NA)
}
hr <- substring(time, 1, 1)
min <- substring(time, 3, 4)
sec <- substring(time, 6, 7)
x <- (as.numeric(hr)*60) + as.numeric(min) + (as.numeric(sec)/60)
return(x)
}
## Ratio of half to full time
half <- time_in_mins(samp$Half)
## Function converts official time to minutes
time_in_mins <- function(time){
if (strcmp(time, "-")) {
return(NA)
}
hr <- substring(time, 1, 1)
min <- substring(time, 3, 4)
sec <- substring(time, 6, 7)
x <- (as.numeric(hr)*60) + as.numeric(min) + (as.numeric(sec)/60)
return(x)
}
half <- time_in_mins(samp$Half)
## Function converts official time to minutes
time_in_mins <- function(time){
if (strcmp(time, "-") == TRUE) {
return(NA)
}
hr <- substring(time, 1, 1)
min <- substring(time, 3, 4)
sec <- substring(time, 6, 7)
x <- (as.numeric(hr)*60) + as.numeric(min) + (as.numeric(sec)/60)
return(x)
}
## Ratio of half to full time
half <- time_in_mins(samp$Half)
## Function converts official time to minutes
time_in_mins <- function(time){
if (time == "-") {
return(NA)
}
hr <- substring(time, 1, 1)
min <- substring(time, 3, 4)
sec <- substring(time, 6, 7)
x <- (as.numeric(hr)*60) + as.numeric(min) + (as.numeric(sec)/60)
return(x)
}
## Ratio of half to full time
half <- time_in_mins(samp$Half)
## Function converts official time to minutes
time_in_mins <- function(time){
hr <- substring(time, 1, 1)
min <- substring(time, 3, 4)
sec <- substring(time, 6, 7)
x <- (as.numeric(hr)*60) + as.numeric(min) + (as.numeric(sec)/60)
return(x)
}
## Ratio of half to full time
half <- time_in_mins(samp$Half)
full <- time_in_mins(samp$Official.Time)
half
samp$Half
samp$Official.Time
ratio <- half/full
plot(half, ratio)
cv <- sd(time_in_mins(samp$Official.Time))/mean(time_in_mins(samp$Official.Time))
(cv <- sd(time_in_mins(samp$Official.Time))/mean(time_in_mins(samp$Official.Time)))
hist(samp$Age, main="Age of Runners", xLab="Age")
hist(samp$Age, main="Age of Runners", xLab="Age", ylim(0, 200))
hist(samp$Age, main="Age of Runners", xLab="Age", ylim=c(0, 200))
hist(samp$Age, main="Age of Runners", xLab="Age", ylim=c(0, 200), xlim=c(0,90))
hist(samp$Age, main="Age of Runners", xLab="Age", ylim=c(0, 200), xlim=c(0,100))
hist(samp$Age, main="Age of Runners", xLab="Age", ylim=c(0, 200), xlim=c(0,100), col="yellow")
fourty <- subset(samp, samp$Age == 40)
nrow(thirty)
fourty <- subset(samp, samp$Age == 40)
nrow(fourty)
boxplot(time_in_mins(thirty$Official.Time), time_in_mins(fourty$Official.Time), horizontal = TRUE, notch = TRUE)
notch = TRUE, col = "red", main = "Boxplot")
boxplot(time_in_mins(thirty$Official.Time), time_in_mins(fourty$Official.Time), horizontal = TRUE,
notch = TRUE, col = "red", main = "Boxplot")
boxplot(time_in_mins(thirty$Official.Time), time_in_mins(fourty$Official.Time), horizontal = TRUE,
notch = TRUE, col = "red", main = "Boxplot", xlab = "Age", ylab = "Official Time")
notch = TRUE, col = "red", main = "Boxplot", xlab = "Official Time", ylab = "Age")
boxplot(time_in_mins(thirty$Official.Time), time_in_mins(fourty$Official.Time), horizontal = TRUE,
notch = TRUE, col = "red", main = "Boxplot", xlab = "Official Time", ylab = "Age")
library(e1071)  
skewness(time_in_mins(samp$Official.Time))
plot(time_in_mins(samp$Official.Time)
)
plot(density(time_in_mins(samp$Official.Time)))
plot(density(time_in_mins(samp$Official.Time)))
## CV Approach
lb.t = -4
ub.t = qt(0.90, n-1)
##plot for critical value approach
plot(function(x) dt(x, n-1),
xlim=c(-4, 4), main=paste("t: Mean =", 0, ", SD_MU =", 1),xlab="X",ylab="")
segments(lb.t, 0, lb.t, dt(lb.t, n-1))
segments(ub.t, 0, ub.t, dt(ub.t, n-1))
cord.x <- c(lb.t,seq(lb.t,ub.t,0.01),ub.t)
cord.y <- c(0,dt(seq(lb.t, ub.t, 0.01), n-1),0)
polygon(cord.x,cord.y,col="yellow")
text(-4, dt(0, n-1), paste("Prob =", round(pt(ub.t, n-1)-pt(lb.t, n-1), 2)), pos = 4)
arrows(re$statistic, 0.2, re$statistic, 0)
alpha <- .05 
(re <- t.test(time_in_mins(samp$Official.Time), mu=238, alt = "two.sided", conf.level = 0.95))
re$p.value < alpha
## REPLICATE P-VALUE
n <- length(time_in_mins(samp$Official.Time))
2*pt(re$statistic, df = n-1, lower.tail=T)
## CV Approach
lb.t = -4
ub.t = qt(0.95, n-1)
##plot for critical value approach
plot(function(x) dt(x, n-1),
xlim=c(-4, 4), main=paste("t: Mean =", 0, ", SD_MU =", 1),xlab="X",ylab="")
segments(lb.t, 0, lb.t, dt(lb.t, n-1))
segments(ub.t, 0, ub.t, dt(ub.t, n-1))
cord.x <- c(lb.t,seq(lb.t,ub.t,0.01),ub.t)
cord.y <- c(0,dt(seq(lb.t, ub.t, 0.01), n-1),0)
polygon(cord.x,cord.y,col="yellow")
text(-4, dt(0, n-1), paste("Prob =", round(pt(ub.t, n-1)-pt(lb.t, n-1), 2)), pos = 4)
arrows(re$statistic, 0.2, re$statistic, 0)
(re <- t.test(time_in_mins(samp$Official.Time), mu=238, alt = "two.sided", conf.level = 0.95))
##Graph non-rejection region and t statistic
lb.t = qt(0.025, n-1)
ub.t = qt(0.975, n-1)
##plot for critical value approach
plot(function(x) dt(x, n-1),
xlim=c(-4, 4), main=paste("t: Mean =", 0, ", SD_MU =", 1),xlab="X",ylab="")
segments(lb.t, 0, lb.t, dt(lb.t, n-1))
segments(ub.t, 0, ub.t, dt(ub.t, n-1))
cord.x <- c(lb.t,seq(lb.t,ub.t,0.01),ub.t)
cord.y <- c(0,dt(seq(lb.t, ub.t, 0.01), n-1),0)
polygon(cord.x,cord.y,col="yellow")
text(-4, dt(0, n-1), paste("Prob =", round(pt(ub.t, n-1)-pt(lb.t, n-1), 2)), pos = 4)
arrows(re$statistic, 0.2, re$statistic, 0)
re$conf.int
q()
